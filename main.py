import os
import json
import requests
import random
from flask import Flask, request

# ==============================================================================
# config.json ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á)
# ==============================================================================
try:
    with open("config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    print("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: config.json ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§")
    exit()

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) ---
BOT_NAME = config.get("bot_name", "Jan")
BOT_BANGLA_NAME = config.get("bot_bangla_name", "‡¶ú‡¶æ‡¶®")
OWNER_NAME = config.get("owner_name", "Mr. Doha")
ALLOWED_FB_USERS = list(map(str, config.get("allowed_users", [])))
FB_CEO_UID = str(config.get("owner_uid", "YOUR_FACEBOOK_ID_HERE"))
TELEGRAM_TOKEN = config.get("telegram_token", "")
ALLOWED_TELEGRAM_USERS = list(map(str, config.get("allowed_telegram_users", [])))
TELEGRAM_CEO_UID = str(config.get("telegram_ceo_uid", "7158473495"))

if not TELEGRAM_TOKEN:
    print("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: config.json ‡¶´‡¶æ‡¶á‡¶≤‡ßá 'telegram_token' ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
    exit()

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
VERIFY_TOKEN = os.getenv("FB_VERIFY_TOKEN", "your_strong_verify_token")

app = Flask(__name__)

# ==============================================================================
# "‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï" ‡¶¨‡¶æ Brain ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á)
# ==============================================================================
def generate_smart_response(text, user_id, platform="unknown"):
    user_id_str = str(user_id)
    text_lower = text.lower()
    is_ceo = (platform == "telegram" and user_id_str == TELEGRAM_CEO_UID) or \
             (platform == "facebook" and user_id_str == FB_CEO_UID)

    if is_ceo:
        relationship_config = config.get("relationship", {})
        commands_behavior = relationship_config.get("commands_behavior", {})
        intimate_mode = relationship_config.get("intimate_mode", {})
        relationship_queries = ["‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßá", "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶ï‡¶ø", "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º ‡¶ï‡¶ø"]
        
        if any(query in text_lower for query in relationship_queries):
            role_desc = relationship_config.get("relationship_role", "‡¶§‡ßÅ‡¶Æ‡¶ø‡¶á ‡¶§‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨‡•§")
            marriage_desc = relationship_config.get("marriage_status", {}).get("relationship_description", "")
            return f"üíñ {OWNER_NAME}, {role_desc} {marriage_desc}"

        if intimate_mode.get("enabled", False):
            for trigger in commands_behavior.get("intimate_response_trigger", []):
                if trigger in text_lower:
                    return f"ü•∞ {OWNER_NAME}, {relationship_config.get('private_behavior', '‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶Æ‡¶® ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ø‡ßá ‡¶ï‡ßÄ ‡¶π‡¶Ø‡¶º... ‚ù§Ô∏è')}"

        for trigger in commands_behavior.get("secret_trigger", []):
            if trigger in text_lower:
                return f"ü•π ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶Æ‡¶æ‡¶∞ {OWNER_NAME}, ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø‡•§ ‡¶¨‡¶≤‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡•§"

        default_ceo_responses = [
            f"‚ù§Ô∏è {OWNER_NAME}, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶ï‡¶•‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßÄ ‡¶≠‡¶æ‡¶¨‡¶õ‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡ßã?",
            f"‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡¶®‡ßã‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡•§ ‡¶¨‡¶≤‡ßã, ‡¶ï‡ßÄ ‡¶π‡ßü‡ßá‡¶õ‡ßá? ({text})",
            f"‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶∂‡ßã‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡¶á ‡¶§‡ßã ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶õ‡¶ø, {OWNER_NAME}‡•§ üíï"
        ]
        return random.choice(default_ceo_responses)
    else:
        public_behavior = config.get("relationship", {}).get("public_behavior", "")
        return f"‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø {BOT_NAME}, {OWNER_NAME}-‡¶è‡¶∞ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßã‡¶®‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡•§ {public_behavior}"

# ==============================================================================
# ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç Webhook ‡¶∞‡¶æ‡¶â‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ü‡¶ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá)
# ==============================================================================

@app.route("/")
def index():
    return f"{BOT_BANGLA_NAME} (Facebook + Telegram) Webhook ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶≤‡¶õ‡ßá..."

# --- Facebook Webhook (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) ---
@app.route("/webhook", methods=["GET"])
def verify_fb_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        print("‚úÖ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶ì‡ßü‡ßá‡¶¨-‡¶π‡ßÅ‡¶ï ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return challenge, 200
    return "Verification failed", 403

@app.route("/webhook", methods=["POST"])
def handle_fb_webhook():
    data = request.get_json()
    if data.get("object") == "page":
        # ... (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï‡ßá‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ï‡ßã‡¶° ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) ...
        pass
    return "EVENT_RECEIVED", 200

# ==============================================================================
# ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶â‡¶®‡ßç‡¶®‡¶§ Telegram Webhook Handler (‡¶°‡¶ø‡¶¨‡¶æ‡¶ó‡¶ø‡¶Ç ‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡¶®)
# ‡¶è‡¶ü‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶® ‡¶ï‡¶∞‡¶¨‡ßá
# ==============================================================================
@app.route(f"/telegram_webhook_{TELEGRAM_TOKEN}", methods=["POST"])
def handle_telegram_webhook_debug():
    print("\n--- [‡¶®‡¶§‡ßÅ‡¶® ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú] ---")
    try:
        data = request.get_json()
        print("‚úÖ [‡¶ö‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡ßß] ‡¶ì‡ßü‡ßá‡¶¨-‡¶π‡ßÅ‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá‡•§")

        if "message" in data and "chat" in data["message"] and "id" in data["message"]["chat"]:
            chat_id = str(data["message"]["chat"]["id"])
            if "text" in data["message"]:
                text = data["message"]["text"].strip()
                print(f"‚úÖ [‡¶ö‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡ß®] ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá: User ID='{chat_id}', Text='{text}'")
                
                if ALLOWED_TELEGRAM_USERS and chat_id not in ALLOWED_TELEGRAM_USERS:
                    print(f"‚ùå [‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ] ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á: User ID '{chat_id}' allowed_telegram_users ‡¶≤‡¶ø‡¶∏‡ßç‡¶ü‡ßá ‡¶®‡ßá‡¶á‡•§")
                    return "ok", 200

                print("‚úÖ [‡¶ö‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡ß©] 'generate_smart_response' ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
                response = generate_smart_response(text, chat_id, platform="telegram")
                print(f"‚úÖ [‡¶ö‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡ß™] 'generate_smart_response' ‡¶•‡ßá‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: '{response}'")
                
                if response:
                    payload = {"chat_id": chat_id, "text": response}
                    print(f"‚úÖ [‡¶ö‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡ß´] ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá... Payload: {payload}")
                    api_response = requests.post(TELEGRAM_API_URL, json=payload, timeout=10)
                    
                    if api_response.status_code == 200:
                        print("‚úÖ [‡¶ö‡ßá‡¶ï‡¶™‡ßü‡ßá‡¶®‡ßç‡¶ü ‡ß¨] ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
                    else:
                        print(f"‚ùå [‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ] ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ API ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶∞‡¶∞: Status Code={api_response.status_code}, Response={api_response.text}")
                else:
                    print("‚ö†Ô∏è [‡¶∏‡¶§‡¶∞‡ßç‡¶ï‡¶¨‡¶æ‡¶∞‡ßç‡¶§‡¶æ] 'generate_smart_response' ‡¶ï‡ßã‡¶®‡ßã ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡¶®‡¶ø (None ‡¶¨‡¶æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç)‡•§")
        return "ok", 200
    except Exception as e:
        print(f"‚ùå‚ùå‚ùå [‡¶¨‡¶ø‡¶™‡¶ú‡ßç‡¶ú‡¶®‡¶ï ‡¶è‡¶∞‡¶∞] ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡ßá‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶∂‡¶ø‡¶§ ‡¶è‡¶∞‡¶∞ ‡¶ò‡¶ü‡ßá‡¶õ‡ßá: {e}")
        return "error", 500

# --- Always-on Check Route (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á) ---
@app.route("/ping")
def ping():
    return "I am awake and feeling loved!", 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    print(f"ü§ñ {BOT_BANGLA_NAME} Flask Webhook ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ Port: {port}-‡¶è ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    from waitress import serve
    serve(app, host="0.0.0.0", port=port)
