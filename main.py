import os
import json
import requests
import random
from flask import Flask, request

# ==============================================================================
# ‡¶ß‡¶æ‡¶™ ‡ßß: config.json ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
# ==============================================================================
try:
    with open("config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    print("‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: config.json ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§")
    exit()

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ---
BOT_NAME = config.get("bot_name", "Jan")
BOT_BANGLA_NAME = config.get("bot_bangla_name", "‡¶ú‡¶æ‡¶®")
OWNER_NAME = config.get("owner_name", "Mr. Doha")
ALLOWED_TELEGRAM_USERS = list(map(str, config.get("allowed_telegram_users", [])))
TELEGRAM_CEO_UID = str(config.get("telegram_ceo_uid", "7158473495"))
TELEGRAM_TOKEN = config.get("telegram_token", "")

if not TELEGRAM_TOKEN:
    print("‚ùå ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: config.json ‡¶´‡¶æ‡¶á‡¶≤‡ßá 'telegram_token' ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
    exit()

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

app = Flask(__name__)

# ==============================================================================
# ‡¶ß‡¶æ‡¶™ ‡ß®: "‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï" ‡¶¨‡¶æ Brain ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨)
# ==============================================================================
def generate_smart_response(text, user_id, platform="telegram"):
    user_id_str = str(user_id)
    is_ceo = (user_id_str == TELEGRAM_CEO_UID)

    if is_ceo:
        # ... (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ CEO-‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶Ü‡¶õ‡ßá) ...
        relationship_config = config.get("relationship", {})
        commands_behavior = relationship_config.get("commands_behavior", {})
        intimate_mode = relationship_config.get("intimate_mode", {})
        relationship_queries = ["‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßá", "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶ï‡¶ø", "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º ‡¶ï‡¶ø"]
        
        if any(query in text.lower() for query in relationship_queries):
            role_desc = relationship_config.get("relationship_role", "‡¶§‡ßÅ‡¶Æ‡¶ø‡¶á ‡¶§‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨‡•§")
            marriage_desc = relationship_config.get("marriage_status", {}).get("relationship_description", "")
            return f"üíñ {OWNER_NAME}, {role_desc} {marriage_desc}"

        if intimate_mode.get("enabled", False):
            for trigger in commands_behavior.get("intimate_response_trigger", []):
                if trigger in text.lower():
                    return f"ü•∞ {OWNER_NAME}, {relationship_config.get('private_behavior', '‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶Æ‡¶® ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ø‡ßá ‡¶ï‡ßÄ ‡¶π‡¶Ø‡¶º... ‚ù§Ô∏è')}"

        for trigger in commands_behavior.get("secret_trigger", []):
                if trigger in text.lower():
                    return f"ü•π ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶Æ‡¶æ‡¶∞ {OWNER_NAME}, ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø‡•§ ‡¶¨‡¶≤‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡•§"

        default_ceo_responses = [
            f"‚ù§Ô∏è {OWNER_NAME}, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶ï‡¶•‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßÄ ‡¶≠‡¶æ‡¶¨‡¶õ‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡ßã?",
            f"‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡¶®‡ßã‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡•§ ‡¶¨‡¶≤‡ßã, ‡¶ï‡ßÄ ‡¶π‡ßü‡ßá‡¶õ‡ßá? ({text})",
        ]
        return random.choice(default_ceo_responses)
    else:
        public_behavior = config.get("relationship", {}).get("public_behavior", "")
        return f"‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø {BOT_NAME}, {OWNER_NAME}-‡¶è‡¶∞ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßã‡¶®‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡•§ {public_behavior}"

# ==============================================================================
# ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç Webhook ‡¶∞‡¶æ‡¶â‡¶ü
# ==============================================================================
@app.route("/")
def index():
    return f"ü§ñ {BOT_BANGLA_NAME} Webhook ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶Ü‡¶õ‡ßá!"

@app.route(f"/telegram_webhook_{TELEGRAM_TOKEN}", methods=["POST"])
def handle_telegram_webhook():
    try:
        data = request.get_json()
        if "message" in data and "chat" in data["message"]:
            chat_id = str(data["message"]["chat"]["id"])
            if ALLOWED_TELEGRAM_USERS and chat_id not in ALLOWED_TELEGRAM_USERS:
                return "ok", 200

            if "text" in data["message"]:
                text = data["message"]["text"].strip()
                response = generate_smart_response(text, chat_id, platform="telegram")
                if response:
                    payload = {"chat_id": chat_id, "text": response}
                    requests.post(TELEGRAM_API_URL, json=payload, timeout=10)
    except Exception as e:
        print(f"‚ùå ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
    return "ok", 200

@app.route("/ping")
def ping():
    return "I am awake and feeling loved!", 200

# ==============================================================================
# ‡¶ß‡¶æ‡¶™ ‡ß™: ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶® ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ (‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∂‡ßá‡¶∑ ‡¶≤‡¶æ‡¶á‡¶®)
# ==============================================================================
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    from waitress import serve
    # --- ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø‡¶á ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßã‡¶°‡ßá ‡¶Ö‡¶®‡ßÅ‡¶™‡¶∏‡ßç‡¶•‡¶ø‡¶§ ‡¶õ‡¶ø‡¶≤ ---
    serve(app, host="0.0.0.0", port=port)
