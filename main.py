import os
import json
import requests
import random
from flask import Flask, request

# ==============================================================================
# ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶•‡ßá‡¶ï‡ßá ‡¶ó‡ßã‡¶™‡¶® ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
# ==============================================================================
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")

# config.json ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
try:
    with open("config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    config = {}

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ---
BOT_NAME = config.get("bot_name", "Jan")
OWNER_NAME = config.get("owner_name", "Mr. Doha")
ALLOWED_TELEGRAM_USERS = list(map(str, config.get("allowed_telegram_users", [])))
TELEGRAM_CEO_UID = str(config.get("telegram_ceo_uid", "7158473495"))

if not TELEGRAM_TOKEN:
    print("‚ùå ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶§‡ßç‡¶Æ‡¶ï ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: TELEGRAM_TOKEN ‡¶è‡¶®‡¶≠‡¶æ‡¶Ø‡¶º‡¶∞‡¶®‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶®‡ßá‡¶á‡•§")
    # ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶®‡¶æ ‡¶∞‡ßá‡¶ñ‡ßá ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶≠‡¶æ‡¶≤‡ßã
    # exit() # ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡¶∂‡¶®‡ßá exit() ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶®‡¶æ ‡¶ï‡¶∞‡¶æ‡¶á ‡¶≠‡¶æ‡¶≤‡ßã

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage" if TELEGRAM_TOKEN else None
app = Flask(__name__)

# ==============================================================================
# ‡¶ß‡¶æ‡¶™ ‡ß®: "‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï" ‡¶¨‡¶æ Brain ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
# ==============================================================================
def generate_smart_response(text, user_id):
    is_ceo = (str(user_id) == TELEGRAM_CEO_UID)
    if is_ceo:
        # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ CEO-‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ö‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶Ü‡¶õ‡ßá...
        # ... (‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶∞‡¶æ‡¶ñ‡¶õ‡¶ø) ...
        return f"‚ù§Ô∏è ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶Æ‡¶æ‡¶∞ {OWNER_NAME}, ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡ßá‡ßü‡ßá‡¶õ‡¶ø: '{text}'"
    else:
        return f"‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã, ‡¶Ü‡¶Æ‡¶ø {BOT_NAME}‡•§"

# ==============================================================================
# ‡¶ß‡¶æ‡¶™ ‡ß©: ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç Webhook ‡¶∞‡¶æ‡¶â‡¶ü
# ==============================================================================
@app.route("/")
def index():
    return "ü§ñ Webhook ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶Ü‡¶õ‡ßá!"

# --- Telegram Webhook Handler ---
@app.route(f"/telegram_webhook", methods=["POST"])
def handle_telegram_webhook():
    if not TELEGRAM_API_URL:
        return "error: telegram token not configured", 500
    try:
        data = request.get_json()
        if "message" in data and "chat" in data["message"]:
            chat_id = str(data["message"]["chat"]["id"])
            if ALLOWED_TELEGRAM_USERS and chat_id not in ALLOWED_TELEGRAM_USERS:
                return "ok", 200

            if "text" in data["message"]:
                text = data["message"]["text"].strip()
                response = generate_smart_response(text, chat_id)
                if response:
                    payload = {"chat_id": chat_id, "text": response}
                    requests.post(TELEGRAM_API_URL, json=payload, timeout=10)
    except Exception as e:
        print(f"‚ùå ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶≤‡¶æ‡¶∞‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ: {e}")
    return "ok", 200

# --- Webhook ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶∞‡ßÅ‡¶ü ---
@app.route("/set_webhook")
def set_webhook():
    if not TELEGRAM_TOKEN or "RENDER_EXTERNAL_URL" not in os.environ:
         return "Error: Token or a RENDER_EXTERNAL_URL not configured.", 500
    
    webhook_url = f"{os.getenv('RENDER_EXTERNAL_URL')}/telegram_webhook"
    set_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook?url={webhook_url}"
    response = requests.get(set_url)
    return response.json()

# --- ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶ï‡¶∞‡¶æ ---
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    from waitress import serve
    print(f"ü§ñ {BOT_NAME} ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ Port: {port}-‡¶è ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    serve(app, host="0.0.0.0", port=port)
