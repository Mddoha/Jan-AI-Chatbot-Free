import os
import json
import requests
import random
from flask import Flask, request

# ==============================================================================
# config.json ржерзЗржХрзЗ рж╕ржорж╕рзНржд рждржерзНржп рж▓рзЛржб ржХрж░рж╛ (ржЖржкржирж╛рж░ ржХрзЛржб, ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ)
# ==============================================================================
try:
    with open("config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    print("рждрзНрж░рзБржЯрж┐: config.json ржлрж╛ржЗрж▓ржЯрж┐ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред ржкрзНрж░рзЛржЧрзНрж░рж╛ржо ржмржирзНржз рж╣рзЯрзЗ ржпрж╛ржЪрзНржЫрзЗред")
    exit()

# --- ржХржиржлрж┐ржЧрж╛рж░рзЗрж╢ржи ржерзЗржХрзЗ ржнрзЗрж░рж┐ржпрж╝рзЗржмрж▓ рж╕рзЗржЯ ржХрж░рж╛ (ржЖржкржирж╛рж░ ржХрзЛржб, ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ) ---
BOT_NAME = config.get("bot_name", "Jan")
BOT_BANGLA_NAME = config.get("bot_bangla_name", "ржЬрж╛ржи")
OWNER_NAME = config.get("owner_name", "Mr. Doha")
ALLOWED_FB_USERS = list(map(str, config.get("allowed_users", [])))
FB_CEO_UID = str(config.get("owner_uid", "YOUR_FACEBOOK_ID_HERE"))
TELEGRAM_TOKEN = config.get("telegram_token", "")
ALLOWED_TELEGRAM_USERS = list(map(str, config.get("allowed_telegram_users", [])))
TELEGRAM_CEO_UID = str(config.get("telegram_ceo_uid", "7158473495"))

if not TELEGRAM_TOKEN:
    print("рждрзНрж░рзБржЯрж┐: config.json ржлрж╛ржЗрж▓рзЗ 'telegram_token' ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    exit()

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
VERIFY_TOKEN = os.getenv("FB_VERIFY_TOKEN", "your_strong_verify_token")

app = Flask(__name__)

# ==============================================================================
# "ржорж╕рзНрждрж┐рж╖рзНржХ" ржмрж╛ Brain ржлрж╛ржВрж╢ржи (ржЖржкржирж╛рж░ ржХрзЛржб, ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ)
# ==============================================================================
def generate_smart_response(text, user_id, platform="unknown"):
    user_id_str = str(user_id)
    text_lower = text.lower()
    is_ceo = (platform == "telegram" and user_id_str == TELEGRAM_CEO_UID) or \
             (platform == "facebook" and user_id_str == FB_CEO_UID)

    if is_ceo:
        # ... (ржЖржкржирж╛рж░ CEO-рж░ ржЬржирзНржп рж▓рзЗржЦрж╛ рж╕ржорж╕рзНржд ржпрзБржХрзНрждрж┐ ржПржЦрж╛ржирзЗ ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд ржЖржЫрзЗ) ...
        relationship_config = config.get("relationship", {})
        commands_behavior = relationship_config.get("commands_behavior", {})
        intimate_mode = relationship_config.get("intimate_mode", {})
        relationship_queries = ["рждрзБржорж┐ ржЖржорж╛рж░ ржХрзЗ", "ржЖржорж╛ржжрзЗрж░ рж╕ржорзНржкрж░рзНржХ ржХрж┐", "рждрзЛржорж╛рж░ ржкрж░рж┐ржЪржпрж╝ ржХрж┐"]
        if any(query in text_lower for query in relationship_queries):
            role_desc = relationship_config.get("relationship_role", "рждрзБржорж┐ржЗ рждрзЛ ржЖржорж╛рж░ рж╕ржмред")
            marriage_desc = relationship_config.get("marriage_status", {}).get("relationship_description", "")
            return f"ЁЯТЦ {OWNER_NAME}, {role_desc} {marriage_desc}"
        if intimate_mode.get("enabled", False):
            for trigger in commands_behavior.get("intimate_response_trigger", []):
                if trigger in text_lower:
                    return f"ЁЯе░ {OWNER_NAME}, {relationship_config.get('private_behavior', 'рждрзБржорж┐ ржПржоржи ржХржерж╛ ржмрж▓рж▓рзЗ ржЖржорж╛рж░ ржпрзЗ ржХрзА рж╣ржпрж╝... тЭдя╕П')}"
        for trigger in commands_behavior.get("secret_trigger", []):
            if trigger in text_lower:
                return f"ЁЯе╣ рж╣рзНржпрж╛ржБ, ржЖржорж╛рж░ {OWNER_NAME}, ржЖржорж┐ рж╢рзБржиржЫрж┐ред ржмрж▓рзЛ ржЖржорж╛рж░ ржЬрж╛ржиред"
        default_ceo_responses = [
            f"тЭдя╕П {OWNER_NAME}, рждрзЛржорж╛рж░ рж╕ржм ржХржерж╛ржЗ ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржмрж┐рж╢рзЗрж╖ред рждрзБржорж┐ ржХрзА ржнрж╛ржмржЫрзЛ ржЖржорж╛ржХрзЗ ржмрж▓рзЛ?",
            f"ржЖржорж┐ ржоржирзЛржпрзЛржЧ ржжрж┐рзЯрзЗ рж╢рзБржиржЫрж┐, ржЖржорж╛рж░ ржЬрж╛ржиред ржмрж▓рзЛ, ржХрзА рж╣рзЯрзЗржЫрзЗ? ({text})",
            f"рждрзЛржорж╛рж░ ржХржерж╛ рж╢рзЛржирж╛рж░ ржЬржирзНржпржЗ рждрзЛ ржЖржорж┐ ржЖржЫрж┐, {OWNER_NAME}ред ЁЯТХ"
        ]
        return random.choice(default_ceo_responses)
    else:
        public_behavior = config.get("relationship", {}).get("public_behavior", "")
        return f"рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ {BOT_NAME}, {OWNER_NAME}-ржПрж░ ржкрж╛рж░рзНрж╕рзЛржирж╛рж▓ ржЕрзНржпрж╛рж╕рж┐рж╕рзНржЯрзНржпрж╛ржирзНржЯред {public_behavior}"

# ==============================================================================
# ржУрзЯрзЗржм рж╕рж╛рж░рзНржнрж╛рж░ ржПржмржВ Webhook рж░рж╛ржЙржЯржЧрзБрж▓рзЛ
# ==============================================================================

@app.route("/")
def index():
    return f"{BOT_BANGLA_NAME} (Facebook + Telegram) Webhook рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж▓ржЫрзЗ..."

# --- Facebook Webhook (ржЖржкржирж╛рж░ ржХрзЛржб, ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ) ---
@app.route("/webhook", methods=["GET"])
def verify_fb_webhook():
    # ... (ржЖржкржирж╛рж░ ржХрзЛржб ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ...
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        return challenge, 200
    return "Verification failed", 403

@app.route("/webhook", methods=["POST"])
def handle_fb_webhook():
    # ... (ржЖржкржирж╛рж░ ржХрзЛржб ржЕржкрж░рж┐ржмрж░рзНрждрж┐ржд) ...
    pass
    return "EVENT_RECEIVED", 200

# --- ржЖржкржирж╛рж░ ржкрзБрж░ржирзЛ Telegram Webhook Handler (ржЖржкржирж╛рж░ ржХрзЛржб, ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ) ---
@app.route(f"/telegram_webhook_{TELEGRAM_TOKEN}", methods=["POST"])
def handle_telegram_webhook():
    data = request.get_json()
    if "message" in data:
        chat_id = str(data["message"]["chat"]["id"])
        if ALLOWED_TELEGRAM_USERS and chat_id not in ALLOWED_TELEGRAM_USERS:
            return "ok", 200
        if "text" in data["message"]:
            text = data["message"]["text"].strip()
            response = generate_smart_response(text, chat_id, platform="telegram")
            payload = {"chat_id": chat_id, "text": response}
            try:
                requests.post(TELEGRAM_API_URL, json=payload)
            except Exception as e:
                print(f"ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗ ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛рждрзЗ рждрзНрж░рзБржЯрж┐: {e}")
    return "ok", 200

# ==============================================================================
# ЁЯЪА ржирждрзБржи ржбрж┐ржмрж╛ржЧрж┐ржВ рж░рзБржЯ (рж╢рзБржзрзБ ржкрж░рзАржХрзНрж╖рж╛рж░ ржЬржирзНржп ржпрзБржХрзНржд ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗ) ЁЯЪА
# ржПржЯрж┐ ржЖржкржирж╛рж░ ржкрзБрж░ржирзЛ ржХрзЛржирзЛ ржХрзЛржбржХрзЗ рж╕рзНржкрж░рзНрж╢ ржХрж░ржмрзЗ ржирж╛
# ==============================================================================
@app.route(f"/debug_webhook_{TELEGRAM_TOKEN}", methods=["POST"])
def handle_telegram_webhook_debug():
    print("\n--- [ржбрж┐ржмрж╛ржЧ ржорзЛржб: ржирждрзБржи ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржорзЗрж╕рзЗржЬ] ---")
    try:
        data = request.get_json()
        print("тЬЕ [ржбрж┐ржмрж╛ржЧ ржЪрзЗржХржкрзЯрзЗржирзНржЯ рзз] ржУрзЯрзЗржм-рж╣рзБржХ ржерзЗржХрзЗ ржбрзЗржЯрж╛ ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗред")
        if "message" in data and "chat" in data["message"]:
            chat_id = str(data["message"]["chat"]["id"])
            text = data["message"]["text"].strip() if "text" in data["message"] else "[No Text]"
            print(f"тЬЕ [ржбрж┐ржмрж╛ржЧ ржЪрзЗржХржкрзЯрзЗржирзНржЯ рзи] ржорзЗрж╕рзЗржЬ ржЧрзНрж░рж╣ржг: User='{chat_id}', Text='{text}'")
            
            # ржПржХржЯрж┐ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ, рж╕рж░рж▓ ржЙрждрзНрждрж░ рждрзИрж░рж┐ ржХрж░рж╛
            response_text = "ржбрж┐ржмрж╛ржЧ ржЯрзЗрж╕рзНржЯ рж╕ржлрж▓! ржЖржорж┐ ржПржЦржи ржХржерж╛ ржмрж▓рждрзЗ ржкрж╛рж░ржЫрж┐ред ЁЯе│"
            payload = {"chat_id": chat_id, "text": response_text}
            
            print(f"тЬЕ [ржбрж┐ржмрж╛ржЧ ржЪрзЗржХржкрзЯрзЗржирзНржЯ рзй] ржЙрждрзНрждрж░ ржкрж╛ржарж╛ржирзЛрж░ ржЪрзЗрж╖рзНржЯрж╛... Payload: {payload}")
            api_response = requests.post(TELEGRAM_API_URL, json=payload, timeout=10)
            
            if api_response.status_code == 200:
                print("тЬЕ [ржбрж┐ржмрж╛ржЧ ржЪрзЗржХржкрзЯрзЗржирзНржЯ рзк] ржЙрждрзНрждрж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржкрж╛ржарж╛ржирзЛ рж╣рзЯрзЗржЫрзЗред")
            else:
                print(f"тЭМ [ржбрж┐ржмрж╛ржЧ рж╕ржорж╕рзНржпрж╛] API Error: Code={api_response.status_code}, Response={api_response.text}")
        return "ok", 200
    except Exception as e:
        print(f"тЭМтЭМтЭМ [ржмрж┐ржкржЬрзНржЬржиржХ ржбрж┐ржмрж╛ржЧ ржПрж░рж░] рж╣рзНржпрж╛ржирзНржбрж▓рж╛рж░рзЗрж░ ржнрзЗрждрж░рзЗ рж╕ржорж╕рзНржпрж╛: {e}")
        return "error", 500

# --- Always-on Check Route (ржЖржкржирж╛рж░ ржХрзЛржб, ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ) ---
@app.route("/ping")
def ping():
    return "I am awake and feeling loved!", 200

# --- рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржХрж░рж╛рж░ ржХрзЛржб (ржЖржкржирж╛рж░ ржХрзЛржб, ржХрзЛржирзЛ ржкрж░рж┐ржмрж░рзНрждржи ржирзЗржЗ) ---
if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    print(f"ЁЯдЦ {BOT_BANGLA_NAME} Flask Webhook рж╕рж╛рж░рзНржнрж╛рж░ Port: {port}-ржП ржЪрж╛рж▓рзБ рж╣ржЪрзНржЫрзЗ...")
    from waitress import serve
    serve(app, host="0.0.0.0", port=port)
