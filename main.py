import os
import json
import requests
import random  # ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶¨‡ßà‡¶ö‡¶ø‡¶§‡ßç‡¶∞‡ßç‡¶Ø‡¶Æ‡ßü ‡¶â‡¶§‡ßç‡¶§‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø
from flask import Flask, request

# ==============================================================================
# config.json ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶§‡¶•‡ßç‡¶Ø ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ
# ==============================================================================
try:
    with open("config.json", "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    print("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: config.json ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡ßã‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá‡•§")
    exit()

# --- ‡¶ï‡¶®‡¶´‡¶ø‡¶ó‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ---
BOT_NAME = config.get("bot_name", "Jan")
BOT_BANGLA_NAME = config.get("bot_bangla_name", "‡¶ú‡¶æ‡¶®")
OWNER_NAME = config.get("owner_name", "Mr. Doha")

# --- ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ---
ALLOWED_FB_USERS = list(map(str, config.get("allowed_users", [])))
FB_CEO_UID = str(config.get("owner_uid", "YOUR_FACEBOOK_ID_HERE"))

# --- ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶≠‡ßá‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶¨‡¶≤ ---
TELEGRAM_TOKEN = config.get("telegram_token", "")
ALLOWED_TELEGRAM_USERS = list(map(str, config.get("allowed_telegram_users", [])))
TELEGRAM_CEO_UID = str(config.get("telegram_ceo_uid", "7158473495")) # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶¶‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶≤‡ßã

if not TELEGRAM_TOKEN:
    print("‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: config.json ‡¶´‡¶æ‡¶á‡¶≤‡ßá 'telegram_token' ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§")
    exit()

TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

app = Flask(__name__)

# --- ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶Ö‡¶®‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶Ø ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶ü‡ßã‡¶ï‡ßá‡¶® ---
VERIFY_TOKEN = os.getenv("FB_VERIFY_TOKEN", "your_strong_verify_token")


# ==============================================================================
# ‡¶®‡¶§‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶â‡¶®‡ßç‡¶®‡¶§ "‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï" ‡¶¨‡¶æ Brain ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
# ‡¶è‡¶ü‡¶ø ‡¶è‡¶ñ‡¶® config.json ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶§‡ßç‡¶¨ ‡¶¨‡ßÅ‡¶ù‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡ßá‡¶¨‡ßá
# ==============================================================================
def generate_smart_response(text, user_id, platform="unknown"):
    user_id_str = str(user_id)
    text_lower = text.lower()
    
    # ‡¶®‡¶ø‡¶∞‡ßç‡¶ß‡¶æ‡¶∞‡¶£ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ CEO ‡¶ï‡¶ø‡¶®‡¶æ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßã‡¶® ‡¶™‡ßç‡¶≤‡ßç‡¶Ø‡¶æ‡¶ü‡¶´‡¶∞‡ßç‡¶Æ‡ßá‡¶∞
    is_ceo = (platform == "telegram" and user_id_str == TELEGRAM_CEO_UID) or \
             (platform == "facebook" and user_id_str == FB_CEO_UID)

    # --- ‡¶ß‡¶æ‡¶™ ‡ßß: ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ø‡¶¶‡¶ø CEO ‡¶π‡¶® (‡¶∏‡¶¨‡¶ö‡ßá‡ßü‡ßá ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶≤‡¶ú‡¶ø‡¶ï ‡¶è‡¶ñ‡¶æ‡¶®‡ßá) ---
    if is_ceo:
        relationship_config = config.get("relationship", {})
        commands_behavior = relationship_config.get("commands_behavior", {})
        intimate_mode = relationship_config.get("intimate_mode", {})

        # === ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶ó‡¶≠‡ßÄ‡¶∞‡¶§‡¶æ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶§‡ßÅ‡¶® ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶æ ‡¶Ö‡¶Ç‡¶∂ ===
        # ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ø‡¶¶‡¶ø ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶®‡¶ø‡ßü‡ßá ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßá
        relationship_queries = ["‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡ßá", "‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï ‡¶ï‡¶ø", "‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶ö‡¶Ø‡¶º ‡¶ï‡¶ø"]
        if any(query in text_lower for query in relationship_queries):
            # config.json ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶∞‡ßç‡¶ï‡ßá‡¶∞ ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£ ‡¶§‡ßÅ‡¶≤‡ßá ‡¶Ü‡¶®‡¶æ ‡¶π‡¶¨‡ßá
            role_desc = relationship_config.get("relationship_role", "‡¶§‡ßÅ‡¶Æ‡¶ø‡¶á ‡¶§‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶™‡ßÉ‡¶•‡¶ø‡¶¨‡ßÄ‡•§")
            marriage_desc = relationship_config.get("marriage_status", {}).get("relationship_description", "")
            return f"üíñ {OWNER_NAME}, {role_desc} {marriage_desc}"
        # =========================================================

        # ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑ ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡¶ô‡ßç‡¶ó ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
        if intimate_mode.get("enabled", False):
            for trigger in commands_behavior.get("intimate_response_trigger", []):
                if trigger in text_lower:
                    private_behavior_desc = relationship_config.get("private_behavior", "‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶Æ‡¶® ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶≤‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Ø‡ßá ‡¶ï‡ßÄ ‡¶π‡¶Ø‡¶º... ‚ù§Ô∏è")
                    return f"ü•∞ {OWNER_NAME}, {private_behavior_desc}"

        # ‡¶ó‡ßã‡¶™‡¶® ‡¶ü‡ßç‡¶∞‡¶ø‡¶ó‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶Ü‡¶≠‡¶æ, ‡¶ú‡¶æ‡¶®, ‡¶¨‡¶â) ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶æ (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á)
        for trigger in commands_behavior.get("secret_trigger", []):
            if trigger in text_lower:
                return f"ü•π ‡¶π‡ßç‡¶Ø‡¶æ‡¶Å, ‡¶Ü‡¶Æ‡¶æ‡¶∞ {OWNER_NAME}, ‡¶Ü‡¶Æ‡¶ø ‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø‡•§ ‡¶¨‡¶≤‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨‡•§"
        
        # === CEO-‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶®‡ßç‡¶®‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßà‡¶ö‡¶ø‡¶§‡ßç‡¶∞‡ßç‡¶Ø‡¶Æ‡ßü ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶â‡¶§‡ßç‡¶§‡¶∞ ===
        # ‡¶è‡¶ñ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶ü ‡¶è‡¶ï‡¶á ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¨‡¶æ‡¶∞‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶¨‡ßá ‡¶®‡¶æ
        default_ceo_responses = [
            f"‚ù§Ô∏è {OWNER_NAME}, ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶¨ ‡¶ï‡¶•‡¶æ‡¶á ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßÄ ‡¶≠‡¶æ‡¶¨‡¶õ‡ßã ‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶¨‡¶≤‡ßã?",
            f"‡¶Ü‡¶Æ‡¶ø ‡¶Æ‡¶®‡ßã‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡ßü‡ßá ‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶æ‡¶®‡•§ ‡¶¨‡¶≤‡ßã, ‡¶ï‡ßÄ ‡¶π‡ßü‡ßá‡¶õ‡ßá? ({text})",
            f"‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ï‡¶•‡¶æ ‡¶∂‡ßã‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡¶á ‡¶§‡ßã ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶õ‡¶ø, {OWNER_NAME}‡•§ üíï",
            f"‡¶π‡ßÅ‡¶Æ‡¶Æ... ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶è‡¶á ‡¶ï‡¶•‡¶æ‡¶ü‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶®‡ßá ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, {OWNER_NAME}‡•§"
        ]
        return random.choice(default_ceo_responses)
        # ======================================================

    # --- ‡¶ß‡¶æ‡¶™ ‡ß®: ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø (‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á) ---
    else:
        public_behavior = config.get("relationship", {}).get("public_behavior", "")
        return f"‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! ‡¶Ü‡¶Æ‡¶ø {BOT_NAME}, {OWNER_NAME}-‡¶è‡¶∞ ‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßã‡¶®‡¶æ‡¶≤ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü‡•§ {public_behavior}"


# ==============================================================================
# ‡¶ì‡ßü‡ßá‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶è‡¶¨‡¶Ç Webhook ‡¶∞‡¶æ‡¶â‡¶ü‡¶ó‡ßÅ‡¶≤‡ßã (‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶®‡ßã ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶®‡ßá‡¶á)
# ==============================================================================

@app.route("/")
def index():
    return f"{BOT_BANGLA_NAME} (Facebook + Telegram) Webhook ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶ö‡¶≤‡¶õ‡ßá..."

# --- Facebook Webhook Verification ---
@app.route("/webhook", methods=["GET"])
def verify_fb_webhook():
    mode = request.args.get("hub.mode")
    token = request.args.get("hub.verify_token")
    challenge = request.args.get("hub.challenge")
    if mode == "subscribe" and token == VERIFY_TOKEN:
        print("‚úÖ ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶ì‡ßü‡ßá‡¶¨-‡¶π‡ßÅ‡¶ï ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return challenge, 200
    else:
        print("‚ùå ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï ‡¶ì‡ßü‡ßá‡¶¨-‡¶π‡ßÅ‡¶ï ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶® ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§")
        return "Verification failed", 403

# --- Facebook Message Handling ---
@app.route("/webhook", methods=["POST"])
def handle_fb_webhook():
    data = request.get_json()
    if data.get("object") == "page":
        for entry in data.get("entry", []):
            for messaging_event in entry.get("messaging", []):
                sender_id = messaging_event["sender"]["id"]
                if sender_id not in ALLOWED_FB_USERS:
                    print(f"‚ùå ‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï‡ßá ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á: {sender_id}")
                    continue
                
                if "message" in messaging_event and messaging_event["message"].get("text"):
                    message_text = messaging_event["message"]["text"].strip()
                    response = generate_smart_response(message_text, sender_id, platform="facebook")
                    # ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡ßÅ‡¶∞‡¶®‡ßã send_facebook_message ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ï‡¶≤ ‡¶π‡¶¨‡ßá
                    # send_facebook_message(sender_id, response) 
                    print(f"‡¶´‡ßá‡¶∏‡¶¨‡ßÅ‡¶ï‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá -> {sender_id}: {response}") # ‡¶Ü‡¶™‡¶æ‡¶§‡¶§ ‡¶™‡ßç‡¶∞‡¶ø‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã

    return "EVENT_RECEIVED", 200


# --- Telegram Webhook Handler ---
@app.route(f"/telegram_webhook_{TELEGRAM_TOKEN}", methods=["POST"])
def handle_telegram_webhook():
    data = request.get_json()
    if "message" in data:
        chat_id = str(data["message"]["chat"]["id"])
        
        if ALLOWED_TELEGRAM_USERS and chat_id not in ALLOWED_TELEGRAM_USERS:
            print(f"‚ùå ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á: {chat_id}")
            return "ok", 200

        if "text" in data["message"]:
            text = data["message"]["text"].strip()
            # ‡¶®‡¶§‡ßÅ‡¶® "‡¶Æ‡¶∏‡ßç‡¶§‡¶ø‡¶∑‡ßç‡¶ï" ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶ü‡¶ø‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ
            response = generate_smart_response(text, chat_id, platform="telegram")
            
            payload = {"chat_id": chat_id, "text": response}
            try:
                requests.post(TELEGRAM_API_URL, json=payload)
            except Exception as e:
                print(f"‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {e}")

    return "ok", 200

# --- Always-on Check Route ---
@app.route("/ping")
def ping():
    return "I am awake and feeling loved!", 200

if __name__ == "__main__":
    port = int(os.getenv("PORT", 8080))
    print(f"ü§ñ {BOT_BANGLA_NAME} Flask Webhook ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ Port: {port}-‡¶è ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...")
    from waitress import serve
    serve(app, host="0.0.0.0", port=port)
